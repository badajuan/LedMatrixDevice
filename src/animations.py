"""
Animaciones sobre la matriz de LEDs.
"""
from .matrix import *

# Definiciones de imágenes de números 0-9 como arrays de bytes (cada entero representa una fila)
NUM_IMAGES = [
    [0b000000, 0b001100, 0b001100, 0b011100, 0b001100, 0b001100, 0b001100, 0b111111],
    [0b000000, 0b011110, 0b110011, 0b000011, 0b000110, 0b011000, 0b110000, 0b111111],
    [0b000000, 0b011110, 0b110011, 0b000011, 0b001110, 0b000011, 0b110011, 0b011110],
    [0b000000, 0b000110, 0b001110, 0b010110, 0b100110, 0b111111, 0b000110, 0b000110],
    [0b000000, 0b111111, 0b110000, 0b111110, 0b000011, 0b000011, 0b110011, 0b011110],
    [0b000000, 0b011110, 0b110011, 0b110000, 0b111110, 0b110011, 0b110011, 0b011110],
    [0b000000, 0b111111, 0b110011, 0b000110, 0b000110, 0b001100, 0b001100, 0b001100],
    [0b000000, 0b011110, 0b110011, 0b110011, 0b011110, 0b110011, 0b110011, 0b011110],
    [0b000000, 0b011110, 0b110011, 0b110011, 0b011111, 0b000011, 0b110011, 0b011110],
    [0b000000, 0b011110, 0b110011, 0b110111, 0b111011, 0b110011, 0b110011, 0b011110],
]
NUM_IMAGES_LEN = len(NUM_IMAGES)

LET_IMAGES = [
    [0b000000, 0b011110, 0b110011, 0b110011, 0b111111, 0b110011, 0b110011, 0b110011],
    [0b000000, 0b111110, 0b110011, 0b110011, 0b111110, 0b110011, 0b110011, 0b111110],
    [0b000000, 0b011110, 0b110011, 0b110000, 0b110000, 0b110000, 0b110011, 0b011110],
    [0b000000, 0b111110, 0b110011, 0b110011, 0b110011, 0b110011, 0b110011, 0b111110],
    [0b000000, 0b111111, 0b110000, 0b110000, 0b111110, 0b110000, 0b110000, 0b111111],
    [0b000000, 0b111111, 0b110000, 0b110000, 0b111110, 0b110000, 0b110000, 0b110000],
    [0b000000, 0b011110, 0b110011, 0b110000, 0b110000, 0b110111, 0b110011, 0b011110],
    [0b000000, 0b110011, 0b110011, 0b110011, 0b111111, 0b110011, 0b110011, 0b110011],
    [0b000000, 0b011110, 0b001100, 0b001100, 0b001100, 0b001100, 0b001100, 0b011110],
    [0b000000, 0b001111, 0b000110, 0b000110, 0b000110, 0b110110, 0b110110, 0b011100],
    [0b000000, 0b110011, 0b110110, 0b111100, 0b111000, 0b111100, 0b110110, 0b110011],
    [0b000000, 0b110000, 0b110000, 0b110000, 0b110000, 0b110000, 0b110000, 0b111111],
    [0b000000, 0b110001, 0b111011, 0b111111, 0b110101, 0b110001, 0b110001, 0b110001],
    [0b000000, 0b110001, 0b111001, 0b111101, 0b110111, 0b110011, 0b110001, 0b110001],
    [0b000000, 0b011110, 0b110011, 0b110011, 0b110011, 0b110011, 0b110011, 0b011110],
    [0b000000, 0b111110, 0b110011, 0b110011, 0b110011, 0b111110, 0b110000, 0b110000],
    [0b000000, 0b011110, 0b110011, 0b110011, 0b110011, 0b110111, 0b011110, 0b000011],
    [0b000000, 0b111110, 0b110011, 0b110011, 0b111110, 0b111100, 0b110110, 0b110011],
    [0b000000, 0b011110, 0b110011, 0b110000, 0b011110, 0b000011, 0b110011, 0b011110],
    [0b000000, 0b111111, 0b101101, 0b001100, 0b001100, 0b001100, 0b001100, 0b001100],
    [0b000000, 0b110011, 0b110011, 0b110011, 0b110011, 0b110011, 0b110011, 0b011111],
    [0b000000, 0b110011, 0b110011, 0b110011, 0b110011, 0b110011, 0b011110, 0b001100],
    [0b000000, 0b110001, 0b110001, 0b110001, 0b110101, 0b111111, 0b111011, 0b110001],
    [0b000000, 0b110001, 0b110001, 0b011011, 0b001110, 0b011011, 0b110001, 0b110001],
    [0b000000, 0b110011, 0b110011, 0b110011, 0b011110, 0b001100, 0b001100, 0b001100],
    [0b000000, 0b111111, 0b000011, 0b000110, 0b001100, 0b011000, 0b110000, 0b111111],
    [0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000],
    [0b000000, 0b000000, 0b000000, 0b011110, 0b000011, 0b011111, 0b110011, 0b011111],
    [0b000000, 0b110000, 0b110000, 0b110000, 0b111110, 0b110011, 0b110011, 0b111110],
    [0b000000, 0b000000, 0b000000, 0b011110, 0b110011, 0b110000, 0b110011, 0b011110],
    [0b000000, 0b000011, 0b000011, 0b000011, 0b011111, 0b110011, 0b110011, 0b011111],
    [0b000000, 0b000000, 0b000000, 0b011110, 0b110011, 0b111111, 0b110000, 0b011110],
    [0b000000, 0b001110, 0b011011, 0b011000, 0b011000, 0b111110, 0b011000, 0b011000],
    [0b000000, 0b000000, 0b011111, 0b110011, 0b110011, 0b011111, 0b000011, 0b011110],
    [0b000000, 0b110000, 0b110000, 0b110000, 0b111110, 0b110011, 0b110011, 0b110011],
    [0b000000, 0b000000, 0b001100, 0b000000, 0b001100, 0b001100, 0b001100, 0b011110],
    [0b000000, 0b000110, 0b000000, 0b000110, 0b000110, 0b110110, 0b110110, 0b011100],
    [0b000000, 0b110000, 0b110000, 0b110011, 0b110110, 0b111100, 0b110110, 0b110011],
    [0b000000, 0b001100, 0b001100, 0b001100, 0b001100, 0b001100, 0b001100, 0b001100],
    [0b000000, 0b000000, 0b000000, 0b110001, 0b111011, 0b111111, 0b110101, 0b110101],
    [0b000000, 0b000000, 0b000000, 0b111110, 0b111111, 0b110011, 0b110011, 0b110011],
    [0b000000, 0b000000, 0b000000, 0b011110, 0b110011, 0b110011, 0b110011, 0b011110],
    [0b000000, 0b000000, 0b111110, 0b110011, 0b110011, 0b111110, 0b110000, 0b110000],
    [0b000000, 0b000000, 0b011110, 0b110110, 0b110110, 0b011110, 0b000110, 0b000111],
    [0b000000, 0b000000, 0b000000, 0b111110, 0b110011, 0b110011, 0b110000, 0b110000],
    [0b000000, 0b000000, 0b000000, 0b011111, 0b100000, 0b011110, 0b000001, 0b111110],
    [0b000000, 0b000000, 0b001100, 0b001100, 0b111111, 0b001100, 0b001100, 0b001100],
    [0b000000, 0b000000, 0b000000, 0b110011, 0b110011, 0b110011, 0b110011, 0b011111],
    [0b000000, 0b000000, 0b000000, 0b000000, 0b110011, 0b110011, 0b011110, 0b001100],
    [0b000000, 0b000000, 0b000000, 0b110001, 0b110101, 0b110101, 0b110101, 0b011111],
    [0b000000, 0b000000, 0b000000, 0b110011, 0b011110, 0b001100, 0b011110, 0b110011],
    [0b000000, 0b000000, 0b000000, 0b110011, 0b110011, 0b011111, 0b000011, 0b011110],
    [0b000000, 0b000000, 0b000000, 0b011110, 0b000110, 0b001100, 0b011000, 0b011110],
]
LET_IMAGES_LEN = len(LET_IMAGES)

# Map LET_IMAGES to characters: A-Z (uppercase), space, a-z (lowercase)
LETTERS = (
    [chr(i) for i in range(ord('A'), ord('Z') + 1)] +
    [' '] +
    [chr(i) for i in range(ord('a'), ord('z') + 1)]
)
LETTER_IMAGE_MAP = dict(zip(LETTERS, LET_IMAGES))

def spiral_fill(matrix):
    x, y = 0, 0
    dx, dy = 1, 0
    visited = set()
    matrix.clear()

    for _ in range(8 * 8):
        if 0 <= x < 8 and 0 <= y < 8 and (x, y) not in visited:
            matrix.set_pixel(x, y, 1)
            visited.add((x, y))
            yield  # pause here for next frame
        nx, ny = x + dx, y + dy
        if not (0 <= nx < 8 and 0 <= ny < 8 and (nx, ny) not in visited):
            dx, dy = -dy, dx  # turn right
        x += dx
        y += dy

def blink_actual(matrix,grid,repeats=3):
    for _ in range(repeats):
        matrix.set_grid(grid)
        yield
        matrix.clear()
        yield
    matrix.set_grid(grid)

def count_numbers(matrix):
    """
    Animación que cuenta del 0 al 9 mostrando cada número en la matriz.
    """
    for num in range(NUM_IMAGES_LEN):
        # Desplazar cada fila 1 bit a la derecha
        shifted_image = [row << 1 for row in NUM_IMAGES[num]]
        matrix.set_grid(shifted_image)
        yield

def count_alphabet(matrix):

    for let in range(LET_IMAGES_LEN):
        shifted_image = [row << 1 for row in LET_IMAGES[let]]
        matrix.set_grid(shifted_image)
        yield
